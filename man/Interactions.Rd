% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/interactions.R
\name{Interactions}
\alias{Interactions}
\alias{jqui_resizabled}
\alias{jqui_sortabled}
\alias{jqui_draggabled}
\alias{jqui_droppabled}
\alias{jqui_selectabled}
\alias{jqui_sortable}
\alias{jqui_draggable}
\alias{jqui_droppable}
\alias{jqui_selectable}
\alias{jqui_resizable}
\title{Mouse interactions}
\usage{
jqui_resizabled(tag, options = NULL)

jqui_sortabled(tag, options = NULL)

jqui_draggabled(tag, options = NULL)

jqui_droppabled(tag, options = NULL)

jqui_selectabled(tag, options = NULL)

jqui_sortable(selector, operation = c("enable", "disable", "destroy", "save",
  "load"), options = NULL, switch = NULL)

jqui_draggable(selector, operation = c("enable", "disable", "destroy", "save",
  "load"), options = NULL, switch = NULL)

jqui_droppable(selector, operation = c("enable", "disable", "destroy", "save",
  "load"), options = NULL, switch = NULL)

jqui_selectable(selector, operation = c("enable", "disable", "destroy",
  "save", "load"), options = NULL, switch = NULL)

jqui_resizable(selector, operation = c("enable", "disable", "destroy", "save",
  "load"), options = NULL, switch = NULL)
}
\arguments{
\item{tag}{A shiny tag object to attach mouse interactions to.}

\item{options}{A list of
\href{http://api.jqueryui.com/category/interactions/}{interaction_specific_options}.
Ignored when \code{operation} is set as \code{destroy}. This parameter also
accept a \code{shiny} option that controls the shiny input value returned from
the element. See Details.}

\item{selector}{The target element(s) to be menipulated. Can be a string of
\href{https://api.jquery.com/category/selectors/}{jQuery_selector} or a
\link[htmlwidgets:JS]{JS()} wrapped javascript expression that returns a
\href{http://api.jquery.com/Types/#jQuery}{jQuery object}.}

\item{operation}{A string to determine how to menipulate the mosue interaction.
Should be one of \code{enable}, \code{disable}, \code{destroy}, \code{save} and \code{load}. See
Details.}

\item{switch}{Deprecated, just keep for backward compatibility. Please use
\code{operation} instead.}
}
\value{
\code{jqui_draggabled()}, \code{jqui_droppabled()}, \code{jqui_resizabled()},
\code{jqui_selectabled()} and \code{jqui_sortabled()} returns a modified shiny tag
object with mouse interactions attached. \code{jqui_draggable()},
\code{jqui_droppable()}, \code{jqui_resizable()}, \code{jqui_selectable()} and
\code{jqui_sortable()} return their first parameter \code{selector}.
}
\description{
Attach mouse-based interactions to shiny html tags and input/output widgets,
and provide ways to manipulate them. The interactions include:
\itemize{
\item \href{http://api.jqueryui.com/draggable/}{draggable}: Allow elements to be
moved using the mouse.
\item \href{http://api.jqueryui.com/droppable/}{droppable}: Create targets for
draggable elements.
\item \href{http://api.jqueryui.com/resizable/}{resizable}: Change the size of an
element using the mouse.
\item \href{http://api.jqueryui.com/selectable/}{selectable}: Use the mouse to select
elements, individually or in a group.
\item \href{http://api.jqueryui.com/sortable/}{sortable}: Reorder elements in a list
or grid using the mouse.
}
}
\details{
The functions \code{jqui_draggabled()}, \code{jqui_droppabled()}, \code{jqui_resizabled()},
\code{jqui_selectabled()} and \code{jqui_sortabled()} are used to attach mouse
interactions to a given shiny html widget (defined by \code{tag} parameter) and
therefore should be used in \code{ui} of a shiny app.

The functions \code{jqui_draggable()}, \code{jqui_droppable()}, \code{jqui_resizable()},
\code{jqui_selectable()} and \code{jqui_sortable()} should be used in \code{server} of a
shiny app. They locate the target element(s) in shiny (by \code{selector}
parameter) and manipulate their mouse interactions. The currently supported
operations includes:
\itemize{
\item \code{enable}: Attach the corresponding mouse interaction to the target(s).
\item \code{disable}: Attach the interaction if not and disable it at once (only set the options).
\item \code{destory}: Destroy the interaction.
\item \code{save}: Attach the interaction if not and save the current interaction state.
\item \code{load}: If interaction attached, restore the target(s) to the last saved interaction state.
}

With mouse interactions attached, the cosrresponding interaction states, e.g.
\code{position} of draggable, \code{size} of resizable, \code{selected} of selectable and
\code{order} of sortable, will be send to server in the form of
\code{input$<id>_<state>}. This default settings can be overriden by setting the
\code{shiny} option in the \code{options} parameter. Please see the vignette
\code{Introduction to shinyjqui} for more details.
}
\examples{
library(shiny)
library(highcharter)

## used in ui
jqui_resizabled(actionButton('btn', 'Button'))
jqui_draggabled(plotOutput('plot', width = '400px', height = '400px'),
                options = list(axis = 'x'))
jqui_selectabled(
  div(
    id = 'sel_plots',
    highchartOutput('highchart', width = '300px'),
    plotOutput('ggplot', width = '300px')
  ),
  options = list(
    classes = list(`ui-selected` = 'ui-state-highlight')
  )
)
jqui_sortabled(tags$ul(
  id = 'lst',
  tags$li('A'),
  tags$li('B'),
  tags$li('C')
))

## used in server
\dontrun{
  jqui_draggable('#foo', options = list(grid = c(80, 80)))
  jqui_droppable('.foo', operation = "enable")
}

## use shiny input
if (interactive()) {
  server <- function(input, output) {
    output$foo <- renderHighchart({
      hchart(mtcars, "scatter", hcaes(x = cyl, y = mpg))
    })
    output$position <- renderPrint({
      print(input$foo_position)
    })
  }
  ui <- fluidPage(
    verbatimTextOutput('position'),
    jqui_draggabled(highchartOutput('foo', width = '200px', height = '200px'))
  )
  shinyApp(ui, server)
}

## custom shiny input
func <- JS('function(event, ui){return $(event.target).offset();}')
options <-  list(
  shiny = list(
    abs_position = list(
      dragcreate = func, # send returned value back to shiny when interaction is created.
      drag = func # send returned value to shiny when dragging.
    )
  )
)
jqui_draggabled(highchartOutput('foo', width = '200px', height = '200px'),
                options = options)


}
